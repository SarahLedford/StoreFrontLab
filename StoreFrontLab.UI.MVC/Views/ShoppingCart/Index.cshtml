@model Dictionary<int, StoreFrontLab.UI.MVC.Models.CartItemViewModel>

@*@model IEnumerable<MVC3.UI.MVC.Models.CartItemViewModel>*@

@{
    ViewBag.Title = "Shopping Cart";
    //add local variables for calculations on this page. These will be running total variables
    decimal? cartTotal = 0;
    int totalCountOfItems = 0;
}

<p class="text-right">
    @Html.ActionLink("Back to Shopping", "Index", "Products", null, new { @class = "btn btn-info" })
</p>

<h2 class="text-center">@ViewBag.Title</h2>

@if (Model.Count == 0)
{
    <p class="alert alert-warning">
        @ViewBag.Message
    </p>
}
else
{
    <table class="table">

        @* When iterating through a dictionary, you ahve to specify if you are asking for info about the key or the value *@
        <tr>
            <th>
                @*@if (item.Value.MediaItem.Category.CategoryName == "VHS" || item.Value.MediaItem.Category.CategoryName == "LaserDisc")
                {
                    @:Movie Poster
                }
                else
                {
                    @:Album Art
                }*@
                Product Cover
            </th>
            <th>Quantity</th>
            <th>Title</th>
            <th>Price</th>
            <th>Total</th>
            <th></th>
        </tr>
        @foreach (var item in Model)
        {

            <tr>
                <td>
                    <img src="~/Content/img/shop/t_@item.Value.MediaItem.ProductImage" alt="@item.Value.MediaItem.ProdName Cover" title="@item.Value.MediaItem.ProdName" />
                </td>
                <td>
                    @using (Html.BeginForm("UpdateCart", "ShoppingCart", FormMethod.Post))
                    {
                        @Html.Hidden("ProdID", item.Value.MediaItem.ProdID) //this is so we can pass to the controller the item the user is updating
                        @Html.TextBox("qty", item.Value.Qty, new { @class = "form-control", @style = "max-width:50px; display:inline;" })//shows the user the current qty when the page first loads
                        <input type="submit" value="Update Quantity" class="btn btn-info" />
                    }

                    @{
                        //calculate the running total variable for number of items in cart
                        totalCountOfItems += item.Value.Qty;
                    }
                </td>
                <td>
                    @item.Value.MediaItem.ProdName
                </td>
                <td>
                    @string.Format($"{item.Value.MediaItem.Price:c}")
                </td>
                <td>
                    @* Calculate the line item total and uptdate the running total and overall total of items in cart *@
                    @{
                        decimal? lineTotal = item.Value.MediaItem.Price * item.Value.Qty;
                        cartTotal += lineTotal;
                    }
                    @string.Format($"{lineTotal:c}")
                </td>
                <td>
                    @Html.ActionLink("Remove from Cart", "RemoveFromCart", "ShoppingCart", new { id = item.Value.MediaItem.ProdID }, null)
                </td>
            </tr>
        }

    </table>
}

<p class="alert alert-success text-center" style="font-size:1.25em;">
    You have @totalCountOfItems @string.Format($"{(totalCountOfItems == 1 ? "item" : "items")}") in your cart.
    Your total before taxes and shipping is @string.Format($"{cartTotal:c}.")
</p>
@{
    Session["totalItems"] = totalCountOfItems;
    Session["totalPrice"] = cartTotal;
}